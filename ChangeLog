2011-09-20    <simleo@neuron.crs4.it>

	* bl/vl/app/snp_reannotator/convert_sam.py: added an output format
	for Galaxy's genome segment extractor.

2011-09-19    <simleo@neuron.crs4.it>

	* bl/vl/app/snp_reannotator/convert_sam.py (SnpHitProcessor):
	changed to use numeric values for chromosomes and 'None' instead
	of '*' for a null value.

2011-09-14    <simleo@neuron.crs4.it>

	* bl/vl/app/snp_reannotator/markers_to_fastq.py: renamed from
	masks_to_fastq.py; quality string char set to '~', the maximum for
	all fastq subformats.

2011-09-12    <simleo@neuron.crs4.it>

	* bl/vl/app/snp_reannotator/convert_dbsnp.py: changed to output a
	VL marker definition file. Added an option for trimming the mask
	down to a maximum given size.

2011-09-07  Luca Lianas  <luca@tensa-zangetsu>

	* bl/vl/kb/drivers/omero/data_samples.py (DataSample): lastUpdate property removed

	* models/data_sample.ome.xml: lastUpdate property removed

	* models/vessel.ome.xml: lastUpdate property added to Vessel model (and to all children classes by inheritance).

	* bl/vl/kb/drivers/omero/vessels.py (Vessel): lastUpdate property added to Vessel class.

	* bl/vl/kb/drivers/omero/data_samples.py (DataSample): lastUpdate property added to DataSample class.

	* models/data_sample.ome.xml: added lastUpdate property to DataSample model (and to all children classes by inheritance).

2011-09-05  Luca Lianas  <luca@tensa-zangetsu>

	* bl/vl/kb/drivers/omero/objects_collections.py (VLCollection): lastUpdate field added

	* models/collection.ome.xml: added lastUpdate property to VLCollection model (and to all children classes by inheritance). This field has to be used to track all the changes.

2011-08-15    <zag@manzanillo>

	* bl/vl/kb/drivers/omero/ehr.py (EHR.__init__): Now we can handle
	multiple records for the same archetype for the same individual.

2011-08-12    <zag@manzanillo>

	* bl/vl/app/importer/data_sample.py (Recorder.process_chunk):
	added an hack to deal with data reloads. It is really a quick hack.



	* bl/vl/kb/drivers/omero/data_samples.py
	(IlluminaBeadChipAssayType): Missing HUMAN1M_DUO constant.

2011-08-11    <zag@manzanillo>

	* bl/vl/kb/drivers/omero/objects_collections.py (ContainerStatus):
	updated to new enum.

	* models/collection.ome.xml: added 'USED' to ContainerStatus.

	* bl/vl/kb/drivers/omero/data_samples.py
	(IlluminaBeadChipAssayType): updated to new enum.

	* models/data_sample.ome.xml: changed IlluminaBeadChipAssayType to
	more reasonable string values.

	* tests/bl/vl/kb/test_enums.py: added.

	* bl/vl/app/importer/titer_plate.py (Recorder.process_chunk): oops
	in the handling of barcodes.

	* tools/build_dependency.py (dump_dna_samples): bug fix. it was
	using a sample_label == label, which is not very useful.

2011-08-10    <zag@manzanillo>

	* bl/vl/app/importer/device.py (Recorder.do_consistency_checks):
	bug fix. It was rejecting devices with no barcode (it is legal,
	after all)

	* tools/build_dependency.py: another quick and dirty importer for
	Ilenia style csv. This one should be less lenient on ambiguos
	records. It makes extract_individuals.py and extract_samples.py
	obsolete.

2011-08-09    <zag@manzanillo>

	* bl/vl/kb/drivers/omero/genotyping.py
	(GenotypingAdapter.SNP_SET_COLS): Removed the field 'label'. This
	field, the label of the marker in the specific technological
	context (e.g., affy SNP_A_xxx codes, it redundant, since the
	marker is identified by the marker_vid, and it is dangerous, since
	it can generate confusion.

2011-08-08    <zag@manzanillo>

	* tests/bl/vl/kb/drivers/omero/test_table.py (TestProxyCore):
	added a test for the new get_table_rows selector type cases.

	* bl/vl/kb/drivers/omero/proxy_core.py (ProxyCore.get_table_rows):
	selector can now be either a selection or a list of selections. In
	the latter case, it is interpreted as an 'or' condition between
	the list elements.

	* bl/vl/kb/drivers/omero/genotyping.py (Marker): Added. It is only
	a placeholder for the time being.

	* bl/vl/kb/drivers/omero/proxy.py (Proxy.get_snp_markers): we may
	want markers as standard objects, afterall...

2011-08-05    <zag@manzanillo>

	* galaxy/lib/galaxy/webapps/vlweb/vl_app.py (UniverseApplication):
	Now we can gather omero specific variables from the application
	configuration file
	(UniverseApplication.__init__): Added conf variable 'vl_loglevel'

2011-08-05    <simleo@neuron.crs4.it>

	* bl/vl/utils/snp.py: generalized to support SNPs with more than
	two possible alleles.

2011-08-04    <simleo@neuron.crs4.it>

	* bl/vl/app/import modules now have a galaxy front-end.

	* bl/vl/utils/snp.py (_identify_strand): simpler implementation
	that works with sequences containing non-ACGT letters (basically,
	anything that's not explicitly defined as unambiguous is
	ambiguous). After skipping indels, this version correctly
	identifies all illumina 'TopGenomicSeq' masks as TOP (see
	tests/bl/vl/utils/check_strand_vs_ann.py).

2011-08-03    <zag@manzanillo>

	* bl/vl/app/importer/diagnosis.py: Changed to new style.

	* bl/vl/app/importer/data_collection.py: Changed to new style.

	* bl/vl/app/importer/data_object.py: Changed to new style.

	* bl/vl/app/importer/data_sample.py: Changed to new style.

2011-08-03    <simleo@neuron.crs4.it>

	* bl/vl/app/check_rs.py: changed to convert all masks to TOP
	before doing anything with them.

	* bl/vl/utils/snp.py: rewrote to work without side effects on a
	split mask (this is emphasized by the fact that a split mask is
	now a tuple). Added join_mask.

2011-08-03    <zag@manzanillo>

	* bl/vl/app/importer/data_sample.py: Major rewrite. Now it has, at
	least in spirit, a code structure similar to the one of
	biosample.py and the rest.

	* models/actions.ome.xml: Specialized Device some more, now we
	have Chip (derived from Device) and Scanner (derived from
	HardwareDevice). We have SoftwareProgram too (derived from Device)

 	* bl/vl/app/importer/biosample.py: now it can be used to import
	PlateWells. Removed plate_well.py.

2011-08-02    <simleo@neuron.crs4.it>

	* bl/vl/app/check_rs.py: does not read the full annotation table
	into memory anymore.
	(SnpAnnReader): changed to use bl.vl.utils.snp.split_mask to split
	masks and to return a (label, rs_label, split_mask) tuple.

	* bl/vl/utils/snp.py: code cleanup; convert_to_top now supports
	split masks.

2011-08-01    <zag@manzanillo>

	* galaxy/tools/VL/tools/map_vid.xml: Added.

	* galaxy/tools/VL/importer/biosample.xml: Added

	* galaxy: Renamed galaxy_ui to galaxy. Restructured to be easily
	installed in a standard galaxy deployment.

	* galaxi_ui: Added. This should provide galaxy based interfaces to
	galaxy. It requires a (minimally) hacked version of galaxy.

	* bl/vl/app/importer/main.py: Added. This should simplify
	supporting galaxy_ui

2011-07-31    <zag@manzanillo>

	* tools/create_tables: Changed name from create_snp_tables, added
	support for ehr tables.

	* bl/vl/kb/drivers/omero/objects_collections.py (ContainerStatus):
	Added.
	(Container): Added field 'status'.

	* bl/vl/kb/drivers/omero/demographic.py (InformedConsent): added.
	(Demographic): added.

2011-07-29    <simleo@neuron.crs4.it>

	* tools/check_rs.py: moved DbSnpReader to bl/core. Changed to
	compute a "consensus" sequence for multiple matches.

2011-07-29    <zag@manzanillo>

	* bl/vl/app/importer/study.py: Added a study module. It is
	probably an overkill, but it was needed.

	* tools/importer: Now supports importing study and
	biosample. Explicit blood and dna samples have been removed.

	* bl/vl/app/importer/biosample.py (do_register): Added a biosample
	module. It makes blood_sample and dna_sample obsolete.

2011-07-28    <simleo@neuron.crs4.it>

	* tools/check_rs.py (SnpAnnReader): changed to compile mask
	pattern only once.

2011-07-28    <zag@manzanillo>

	* bl/vl/kb/drivers/omero/genotyping.py
	(GenotypingAdapter.SNP_SET_COLS): Added a 'label' column to keep
	track of the label of the marker in the specific technological
	context (i.e., label given by the producer)

2011-07-27    <simleo@neuron.crs4.it>

	* tools/check_rs.py: changed to use a shelf to store the dbSNP
	index. Output sequences are now stored together with the rs
	labels, allowing for a single read of the dbSNP files.

2011-07-26    <simleo@neuron.crs4.it>

	* tools/check_rs.py (DbSnpReader): header parser made more robust.

2011-07-25    <simleo@neuron.crs4.it>

	* tools/check_rs.py: changed to output dbSNP sequences.

2011-07-22    <zag@manzanillo>

	* docs/index.rst: Started documentation restructuring. Mostly
	moving things around.

2011-07-18    <zag@manzanillo>

	* models/collection.ome.xml: Added ContainerStatus as an enum.
	added it as a required parameter in Container. The idea is to be
	able to track titerplate preparation phases.

	* bl/vl/app/importer/marker_alignment.py: Back to use marker_vid
	to identify markers. It is the only solution with a reasonable hope
	to scale.

2011-07-16    <simleo@neuron.crs4.it>

	* tools/check_rs.py: added an option for specifying a custom cut
	size; fixed auto-calculation of the cut size (we want min flank
	size from the annotation, not max); added checks for over-short
	flanks.

2011-07-06    <zag@manzanillo>

	* bl/vl/kb/drivers/omero/proxy.py (Proxy.add_ehr_record): Added
	interface to eav.py

	* tests/bl/vl/kb/test_eav.py: Added.

	* bl/vl/kb/drivers/omero/eav.py: Added.

2011-07-06    <simleo@neuron.crs4.it>

	* bl/vl/app/kb_query/markers.py (Markers): fixed dump_mapping.

	* bl/vl/app/importer/marker_definition.py
	(Recorder.save_snp_marker_definitions.ns): fixed a bug where
	context was also saved as 'release'.

2011-06-04    <zag@manzanillo>

	* bl/vl/kb/drivers/omero/utils.py: created.

2011-05-26    <zag@manzanillo>

	* models/sample/dna_sample.ome.xml: Removed all the nanodrop
	details, they should be provided as a DataResult produced by a
	NanoDrop device.

2011-05-24    <zag@manzanillo>

	* tests/bl/vl/individual/kb/test_ikb.py
	(TestIKB.create_individual_sample_chain): disabled since it was
	using get_root.

	* tests/bl/vl/sample/kb/test_skb_extended.py
	(TestSKBExtended.check_object): disabled. It will not work, since
	we have dropped proxy_indexed.

	* bl/vl/sample/kb/drivers/omero/sample.py (DataSample): patched to
	map label to name. This is a bug in the DataSample model.

	* bl/vl/sample/kb/drivers/omero/wrapper.py (OmeroWrapper.unload):
	Added support for omero object unloading. It is an experiment.

2011-05-23    <zag@manzanillo>

	* bl/vl/sample/kb/drivers/omero/samples_container.py
	(DataCollection.__setup__): label disabled.

	* bl/vl/app/importer/data_collection.py (Recorder.__init__):
	disabled data_collection.label as a temporary measure before we
	sync the server on the new models.

2011-05-21    <zag@manzanillo>

	* bl/vl/app/importer/data_sample.py
	(import_data_sample_implementation): added a default-contrast-qc
	flag.

2011-05-18    <zag@manzanillo>

	* bl/vl/app/importer/data_collection.py (Recorder): moved
	default_study handling to core.

	* bl/vl/sample/kb/drivers/omero/dependency_tree.py
	(DependencyTree): Added as a more general (albeit slower)
	replacement to proxy_index indexing functions.

2011-05-17    <zag@manzanillo>

	* bl/vl/sample/kb/drivers/omero/proxy_core.py
	(ProxyCore.find_all_by_query): Now we have a factory controlled
	object wrapping. It is a hack, it should converge to the general
	proxy class.

	* bl/vl/individual/pedigree.py (import_pedigree): people can have
	children with more than one partner...
	(import_pedigree): oops, forgot to properly mark
	founder-non-founder families.

2011-05-13    <zag@manzanillo>

	* tests/bl/vl/sample/kb/skb_object_creator.py (SKBObjectCreator.create_data_collection): 
	Changed to the new DataCollection model.

	* examples/load_data.py, examples/call_gt.py (App.preload):
	Changed to the new DataCollection model.

	* bl/vl/sample/kb/drivers/omero/samples_container.py (DataCollection):
	Changed to the new DataCollection model.

	* models/sample/data_collection.ome.xml: added a label field.

	* bl/vl/app/exporter/markers_set.py (do_register): can dump
	markers set definitions.

2011-05-12    <zag@manzanillo>

	* bl/vl/app/exporter/marker_definition.py (do_register): can dump
	marker definitions.

	* tools/exporter (main): Added an exporter utility.

2011-05-11    <zag@manzanillo>

	* bl/vl/app/importer/markers_set.py: Added new tool.

	* bl/vl/app/importer/marker_definition.py (Recorder): Added new tool.

	* tools/create_snp_tables: Added new tool.

2011-05-08    <zag@manzanillo>

	* bl/vl/sample/kb/drivers/omero/data_object.py
	(DataObject.__init__): added support for proxy propagation. This
	should be fixed in a systematic way.

2011-05-05    <zag@manzanillo>

	* bl/vl/app/importer/plate_well.py (Recorder): Added prefetching support.

2011-05-03    <zag@manzanillo>

	* bl/vl/app/importer/individual.py (Recorder.record): clean up.

	* bl/vl/individual/kb/drivers/omero/proxy.py (Proxy.get_enrolled): Added.

2011-04-30    <zag@manzanillo>

	* bl/vl/sample/kb/drivers/omero/samples_container.py (TiterPlate):
	moved barcode, label and virtualContainer handling to superclass

	* tests/bl/vl/individual/kb/test_ikb.py (TestIKB.test_enrollment): in phase ...

	* bl/vl/individual/kb/drivers/omero/individual.py (Individual): in phase ...

	* bl/vl/sample/kb/drivers/omero/study.py (Study): in phase with ...

	* bl/vl/individual/kb/drivers/omero/enrollment.py 
	(Enrollment): in phase with new convoluted...

	* bl/vl/sample/kb/drivers/omero/proxy_core.py (ProxyCore.save):
	Added support for the convoluted dynamic object fetching mechanism.

	* bl/vl/sample/kb/drivers/omero/wrapper.py (OmeroWrapper): Added a
	convoluted mechanism to allow dynamic object fetching.

2011-04-28    <zag@manzanillo>

	* bl/vl/app/importer/plate_well.py (Recorder): same as below...

	* bl/vl/app/importer/titer_plate.py (Recorder):  same as below...

	* bl/vl/app/importer/blood_sample.py (import_blood_sample_implementation): same as below..

	* bl/vl/app/importer/bio_sample.py (BioSampleRecorder): added
	keep_tokens support. Humm, why am i not using **kw???

	* bl/vl/app/importer/core.py (Core.__init__): added keep_tokens support.

	* bl/vl/app/importer/individual.py (Recorder): added keep_tokens support.

	* tools/importer (App.make_parser): added keep-token flag

	* tests/bl/vl/sample/kb/test_skb.py (OME_KEEP): in phase with new
	keep_section_open mechanism.

	* bl/vl/sample/kb/drivers/omero/proxy_core.py (ProxyCore): Added a
	simple keep_session_open mechanism to speed-up operations.

	* tools/importer (App): added titer_plate module.

	* bl/vl/app/importer/plate_well.py: moved all the titer_plate
	stuff to titer_plate.py.

	* bl/vl/app/importer/titer_plate.py: Added.

2011-04-27    <zag@manzanillo>

	* tests/bl/vl/sample/kb/skb_object_creator.py: labLabel -> label

	* models/sample/samples_container.ome.xml: labLabel -> label

	* bl/vl/sample/kb/drivers/omero/proxy.py (Proxy.get_bio_sample): labLabel -> label

	* models/sample/bio_sample.ome.xml: changed labLabel to label

	* tools/extract_individuals.py (load_individuals): now we keep the
	first record found when there is a 'parental' conflict between
	records.

2011-04-24    <zag@pflip>

	* bl/vl/individual/pedigree.py (import_pedigree): Changed
	algorithm. Now it should be able to handle a large number of individuals.

2011-04-22    <zag@pflip>

	* examples/load_data.py (network_builder.call_genotypes): in phase
	with SNPMarkersSet and GenotypeDataSample

	* tests/bl/vl/sample/kb/skb_object_creator.py (SKBObjectCreator.create_snp_markers_set): added.
	(SKBObjectCreator.create_genotype_data_sample): added. Added also relates tests in test_skb.py

	* bl/vl/sample/kb/drivers/omero/genotyping.py (SNPMarkersSet): added.
	(GenotypeDataSample): added.

	* bl/vl/app/importer/core.py (Core.get_device): in phase with new device API

	* examples/load_data.py (network_builder.get_device): in phase
	with new device API

	* tests/bl/vl/sample/kb/test_skb.py (TestSKB.test_device): updated
	to the new API

	* bl/vl/sample/kb/drivers/omero/proxy.py (Proxy.get_device): now
	we search by label.

	* tests/bl/vl/sample/kb/skb_object_creator.py
	(SKBObjectCreator.create_device): in phase with changes to new
	python interface.

	* bl/vl/sample/kb/drivers/omero/device.py (Device): in phase with
	changes to the ome model.

	* models/sample/device.ome.xml: Added a required, unique,
	attribute name. We need it to distinguish between, e.g., physical
	instances of a given class. Changed 'vendor' to a politically
	neutral 'maker'

