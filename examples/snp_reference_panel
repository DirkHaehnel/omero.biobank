#!/usr/bin/env python

# BEGIN_COPYRIGHT
# END_COPYRIGHT

"""
Build a SNP Reference Panel
===========================

given a group of experimental subjects with genotype data for more
than one technology, find the intersection between the marker sets,
then apply further selections to the remaining SNPs based on common
measures such as the MAF.
"""

import sys, argparse, logging

from bl.vl.kb import KBError, KnowledgeBase as KB
import bl.vl.kb.drivers.omero.utils as vlu
#import bl.vl.genotype.algo as algo


LOG_FORMAT = '%(asctime)s|%(levelname)-8s|%(message)s'
LOG_DATEFMT = '%Y-%m-%d %H:%M:%S'
LOG_LEVELS = ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']


def setup_logger(args):
  log_level = getattr(logging, args.loglevel)
  kwargs = {'format': LOG_FORMAT, 'datefmt': LOG_DATEFMT, 'level': log_level}
  if args.logfile:
    kwargs['filename'] = args.logfile
  logging.basicConfig(**kwargs)
  return logging.getLogger()


def get_login_info(args, logger):
  try:
    host = args.host or vlu.ome_host()
    user = args.user or vlu.ome_user()
    passwd = args.passwd or vlu.ome_passwd()
  except ValueError as e:
    logger.critical(e)
    sys.exit(e)
  else:
    return host, user, passwd


def get_msets(kb, args, logger):
  msets = [kb.get_snp_markers_set(label=label) for label in args.ms_labels]
  for ms, label in zip(msets, args.ms_labels):
    if ms is None:
      raise KBError("no marker set with label '%s' found in kb" % label)
    logger.info("loading markers for %s" % label)
    ms.load_markers()
    logger.info("loading alignments for %s" % label)
    ms.load_alignments(args.ref_genome)
  return msets


def make_parser():
  description = __doc__.lstrip().splitlines()[0]
  parser = argparse.ArgumentParser(description=description)
  parser.add_argument('ms_labels', metavar='MS_LABEL', nargs='+',
                      help='marker set label (one or more)')
  parser.add_argument('--ref-genome', metavar="STRING",
                      help="reference genome", default="hg19")
  #--
  parser.add_argument('-H', '--host', type=str, help='omero hostname')
  parser.add_argument('-U', '--user', type=str, help='omero user')
  parser.add_argument('-P', '--passwd', type=str, help='omero password')
  parser.add_argument('--logfile', type=str, help='log file (default=stderr)')
  parser.add_argument('--loglevel', type=str, choices=LOG_LEVELS,
                      help='logging level', default='INFO')
  return parser


def main(argv):
  parser = make_parser()
  args = parser.parse_args(argv)
  if len(args.ms_labels) != 2:
    sys.exit("Sorry, only two marker sets are currently supported")
  logger = setup_logger(args)
  host, user, passwd = get_login_info(args, logger)
  kb = KB(driver="omero")(host, user, passwd)
  ms1, ms2 = get_msets(kb, args, logger)
  idx1, idx2 = kb.SNPMarkersSet.intersect(ms1, ms2)
  assert idx1.size == idx2.size
  logger.info("intersection size: %d" % idx1.size)
  logger.info("getting gdo iterator")
  gdo_iterator = kb.get_gdo_iterator(ms1, indices=idx1)
  #-- FIXME: this is a speed test --
  logger.info("getting records")
  for i, r in enumerate(gdo_iterator):
    logger.debug("processing item #%d" % i)
  #--


if __name__ == "__main__":
  main(sys.argv[1:])


# Local Variables: **
# mode: python **
# End: **
