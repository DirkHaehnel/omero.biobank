#!/usr/bin/env python

import argparse, sys, os

import omero
import omero_ServerErrors_ice


PATH = os.path.abspath(__file__)
DIR = os.path.dirname(PATH)
BIOBANK_ROOT = os.path.normpath(os.path.join(DIR, os.pardir))
GENERATED_BY_MSG = "GENERATED BY %s" % os.sep.join(PATH.rsplit(os.sep, 2)[1:])


class BoolStr(object):
    def __new__(cls, s):
        return False if s == '0' or s.lower() == 'false' else True


CONFIG_VALUES = [
    {'ome_config_value': 'omero.biobank.graph.engine',
     'kb_config_value': 'GRAPH_ENGINE_DRIVER',
     'optional': False, 'type': str},
    {'ome_config_value': 'omero.biobank.graph.uri',
     'kb_config_value': 'GRAPH_ENGINE_URI',
     'optional': False, 'type': str},
    {'ome_config_value': 'omero.biobank.graph.user',
     'kb_config_value': 'GRAPH_ENGINE_USERNAME',
     'optional': True, 'type': str},
    {'ome_config_value': 'omero.biobank.graph.password',
     'kb_config_value': 'GRAPH_ENGINE_PASSWORD',
     'optional': True, 'type': str},
    {'ome_config_value': 'omero.biobank.messages_queue.enabled',
     'kb_config_value': 'MESSAGES_QUEUE_ENGINE_ENABLED',
     'optional': False, 'type': BoolStr},
    {'ome_config_value': 'omero.biobank.messages_queue.host',
     'kb_config_value': 'MESSAGES_QUEUE_ENGINE_HOST',
     'optional': True, 'type': str},
    {'ome_config_value': 'omero.biobank.messages_queue.port',
     'kb_config_value': 'MESSAGES_QUEUE_ENGINE_PORT',
     'optional': True, 'type': int},
    {'ome_config_value': 'omero.biobank.messages_queue.queue',
     'kb_config_value': 'MESSAGES_QUEUE_ENGINE_QUEUE',
     'optional': True, 'type': str},
    {'ome_config_value': 'omero.biobank.messages_queue.user',
     'kb_config_value': 'MESSAGES_QUEUE_ENGINE_USERNAME',
     'optional': True, 'type': str},
    {'ome_config_value': 'omero.biobank.messages_queue.password',
     'kb_config_value': 'MESSAGES_QUEUE_ENGINE_PASSWORD',
     'optional': True, 'type': str}
    ]


def make_parser():
    parser = argparse.ArgumentParser('Build bl-vl config file')
    parser.add_argument('-H', '--host', type=str, help='omero hostname',
                        required=True)
    parser.add_argument('-U', '--user', type=str, help='omero user',
                        required=True)
    parser.add_argument('-P', '--passwd', type=str, help='omero password',
                        required=True)
    parser.add_argument('--python', action='store_true',
                        help='build the bl/vl/kb/config.py file')
    parser.add_argument('--profile', action='store_true',
                        help='build the bash profile file')
    return parser


def get_ome_var(ome_config, conf_details):
    k = conf_details['ome_config_value']
    error_msg = 'Missing required parameter %s, check server config' % k
    v = ome_config.getConfigValue(k)
    if not v:
        if conf_details['optional']:
            return None
        else:
            raise ValueError(error_msg)
    return conf_details['type'](v)


def dump_python_conf_values(output_file, config_values):
    output_file.write('# %s\n' % GENERATED_BY_MSG)
    for k, v in config_values.iteritems():
        output_file.write('%s = %r\n' % (k, v))


def dump_profile_conf_values(output_file, config_values):
    output_file.write('# %s\n' % GENERATED_BY_MSG)
    for k, v in config_values.iteritems():
        if v:
            output_file.write('export %s="%s"\n' % (k.upper().replace('.', '_'), v))
        else:
            output_file.write('export %s="NONE"\n' % k.upper().replace('.', '_'))


def main(argv):
    parser = make_parser()
    args = parser.parse_args(argv)

    c = omero.client(args.host)

    if not args.python and not args.profile:
        msg = 'No output selected, check the program help to know how to enable output options'
        sys.exit(msg)

    try:
        s = c.createSession(args.user, args.passwd)
        ome_config = s.getConfigService()
        config = {}
        for conf_details in CONFIG_VALUES:
            config[conf_details['kb_config_value']] = get_ome_var(
                ome_config, conf_details
                )
            if config.get('GRAPH_ENGINE_DRIVER') == "pygraph":
                CONFIG_VALUES[1]["optional"] = True
        if args.python:
            out_fn = os.path.join(BIOBANK_ROOT, "bl/vl/kb/config.py")
            with open(out_fn, 'w') as ofile:
                dump_python_conf_values(ofile, config)
        if args.profile:
            out_fn = "%s.biobank.profile" % args.host
            with open(out_fn, 'w') as ofile:
                dump_profile_conf_values(ofile, config)
    except omero.SecurityViolation, sv:
        print 'ERROR: unable to build configuration file, the specified account does not belong to your OMERO.biobank SYSTEM users'
    except ValueError, ve:
        print ve.message
    except Exception, e:
        print 'ERROR: Unable to build configuration file'
        print e
    finally:
        c.closeSession()


if __name__ == '__main__':
    main(sys.argv[1:])
