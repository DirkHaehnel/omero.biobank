#!/usr/bin/env python

import argparse, sys, os

import omero
import omero_ServerErrors_ice


PATH = os.path.abspath(__file__)
DIR = os.path.dirname(PATH)
BIOBANK_ROOT = os.path.normpath(os.path.join(DIR, os.pardir))
PYTHON_OUT_FN = os.path.join(BIOBANK_ROOT, "bl/vl/kb/config.py")
GENERATED_BY_MSG = "GENERATED BY %s" % os.sep.join(PATH.rsplit(os.sep, 2)[1:])


class BoolStr(object):
    def __new__(cls, s):
        return False if s == '0' or s.lower() == 'false' else True


CONFIG_VALUES = [
    {
        'ome_config_value': 'omero.biobank.graph.engine',
        'kb_config_value': 'GRAPH_ENGINE_DRIVER',
        'type': str,
        'default': "pygraph",
        },
    {
        'ome_config_value': 'omero.biobank.graph.uri',
        'kb_config_value': 'GRAPH_ENGINE_URI',
        'type': str,
        'default': None,
        },
    {
        'ome_config_value': 'omero.biobank.graph.user',
        'kb_config_value': 'GRAPH_ENGINE_USERNAME',
        'type': str,
        'default': None,
        },
    {
        'ome_config_value': 'omero.biobank.graph.password',
        'kb_config_value': 'GRAPH_ENGINE_PASSWORD',
        'type': str,
        'default': None,
        },
    {
        'ome_config_value': 'omero.biobank.messages_queue.enabled',
        'kb_config_value': 'MESSAGES_QUEUE_ENGINE_ENABLED',
        'type': BoolStr,
        'default': False,
        },
    {
        'ome_config_value': 'omero.biobank.messages_queue.host',
        'kb_config_value': 'MESSAGES_QUEUE_ENGINE_HOST',
        'type': str,
        'default': None,
        },
    {
        'ome_config_value': 'omero.biobank.messages_queue.port',
        'kb_config_value': 'MESSAGES_QUEUE_ENGINE_PORT',
        'type': int,
        'default': None,
        },
    {
        'ome_config_value': 'omero.biobank.messages_queue.queue',
        'kb_config_value': 'MESSAGES_QUEUE_ENGINE_QUEUE',
        'type': str,
        'default': None,
        },
    {
        'ome_config_value': 'omero.biobank.messages_queue.user',
        'kb_config_value': 'MESSAGES_QUEUE_ENGINE_USERNAME',
        'type': str,
        'default': None,
        },
    {
        'ome_config_value': 'omero.biobank.messages_queue.password',
        'kb_config_value': 'MESSAGES_QUEUE_ENGINE_PASSWORD',
        'type': str,
        'default': None,
        }
    ]


def make_parser():
    parser = argparse.ArgumentParser('Build the biobank config file')
    parser.add_argument('-H', '--host', type=str, help='omero hostname')
    parser.add_argument('-U', '--user', type=str, help='omero user')
    parser.add_argument('-P', '--passwd', type=str, help='omero password')
    parser.add_argument('--python', action='store_true',
                        help='build bl/vl/kb/config.py')
    parser.add_argument('--profile', action='store_true',
                        help='build a .sh file in the current dir')
    return parser


def get_ome_var(ome_config, conf_details):
    k = conf_details['ome_config_value']
    v = ome_config.getConfigValue(k)
    return conf_details['default'] if not v else conf_details['type'](v)


def get_config(ome_session):
    config = {}
    ome_config = ome_session.getConfigService()
    for d in CONFIG_VALUES:
        config[d['kb_config_value']] = get_ome_var(ome_config, d)
    if config.get('GRAPH_ENGINE_DRIVER') == "neo4j":
        if not config.get('GRAPH_ENGINE_URI'):
            raise ValueError("graph URI required for neo4j driver")
    return config


def dump_config(output_fn, config, fmt="python"):
    order = [d['kb_config_value'] for d in CONFIG_VALUES]
    with open(output_fn, "w") as f:
        f.write('# %s\n' % GENERATED_BY_MSG)
        for k in order:
            v = config.get(k)
            if fmt == "profile":
                k = k.upper().replace('.', '_')
                entry = 'export %s="%s"' % (k, v or "NONE")
            else:
                entry = '%s = %r' % (k, v)
            f.write("%s\n" % entry)
    print "wrote %s" % output_fn


def dump_defaults():
    config = dict((d['kb_config_value'], d['default']) for d in CONFIG_VALUES)
    dump_config(PYTHON_OUT_FN, config)


def main(argv):
    parser = make_parser()
    args = parser.parse_args(argv)
    if args.host:
        if not args.user or not args.passwd:
            sys.exit("no username and password specified for %s" % args.host)
    else:
        dump_defaults()
        sys.exit(0)
    #--
    c = omero.client(args.host)
    try:
        s = c.createSession(args.user, args.passwd)
        config = get_config(s)
        if args.profile:
            out_fmt = "profile"
            out_fn = "%s.biobank.profile" % args.host
        else:
            out_fmt = "python"
            out_fn = PYTHON_OUT_FN
        dump_config(out_fn, config, fmt=out_fmt)
    except omero.SecurityViolation:
        print 'ERROR: %s is not an OMERO.biobank SYSTEM user' % args.user
    except ValueError as e:
        print 'ERROR: %s' % e
    finally:
        c.closeSession()


if __name__ == '__main__':
    main(sys.argv[1:])
