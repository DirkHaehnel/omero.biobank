#!/usr/bin/env python

# BEGIN_COPYRIGHT
# END_COPYRIGHT

"""
Generate synthetic data for a Marker Set
========================================

Randomly generate genotyping data for a marker set.  Any other
required object (study, individuals, etc.) will be automatically
generated as well.
"""

import sys, argparse, uuid, logging

from bl.vl.kb import KBError, KnowledgeBase as KB
import bl.vl.utils.ome_utils as vlu
import bl.vl.genotype.algo as algo

LOG_FORMAT = '%(asctime)s|%(levelname)-8s|%(message)s'
LOG_DATEFMT = '%Y-%m-%d %H:%M:%S'
LOG_LEVELS = ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']


def create_label(prefix):
  return "%s-%s" % (prefix, uuid.uuid4().hex)


class DataObjectGenerator(object):

  KILL_LIST = []  # for rollback, if anything goes wrong

  def __init__(self, kb, mset_label, logger):
    self.logger = logger
    self.kb = kb
    mset = kb.get_snp_markers_set(label=mset_label)
    if mset is None:
      self.critical("no marker set in kb with label %s" % mset_label)
    self.mset = mset
    self.logger.info("loading markers for %s" % mset_label)
    self.mset.load_markers()

  def __create_label(self):
    return create_label(self.mset.label)

  def critical(self, msg):
    self.logger.critical(msg)
    for x in reversed(self.KILL_LIST):
      self.kb.delete(x)
    raise KBError(msg)

  def create_study(self, desc='dummy'):
    conf = {
      'label': self.__create_label(),
      'description': desc,
      }
    study = self.kb.factory.create(self.kb.Study, conf).save()
    self.KILL_LIST.append(study)
    self.logger.debug("created study with vid: %s" % study.id)
    return study

  def create_action(self, study=None):
    if study is None:
      study = self.create_study()
    action = self.kb.create_an_action(study)
    action.reload()
    self.KILL_LIST.append(action)
    self.logger.debug("created action with vid: %s" % action.id)
    return action

  def create_data_sample(self, action):
    conf = {
      'label': self.__create_label(),
      'status': self.kb.DataSampleStatus.USABLE,
      'action': action,
      'snpMarkersSet': self.mset,
      }
    data_sample = self.kb.factory.create(
      self.kb.GenotypeDataSample, conf
      ).save()
    self.KILL_LIST.append(data_sample)
    self.logger.debug("created data sample with vid: %s" % data_sample.id)
    return data_sample

  def create_data_object(self, action, data_sample):
    probs, confs = algo.generate_data(len(data_sample.snpMarkersSet))
    data_object = self.kb.add_gdo_data_object(action, data_sample, probs, confs)
    self.KILL_LIST.append(data_object)
    return data_object, probs, confs

  def generate(self, n_samples):
    action = self.create_action()
    try:
      for i in xrange(n_samples):
        self.logger.debug("generating data (%d/%d)" % (i+1, n_samples))
        data_sample = self.create_data_sample(action)
        _ = self.create_data_object(action, data_sample)
    except Exception as e:
      self.critical(str(e))


def make_parser():
  description = __doc__.lstrip().splitlines()[0]
  parser = argparse.ArgumentParser(description=description)
  parser.add_argument('ms_label', help='marker set label')
  parser.add_argument('n_samples', type=int, help='n. of samples', default=100)
  #--
  parser.add_argument('-H', '--host', type=str, help='omero hostname')
  parser.add_argument('-U', '--user', type=str, help='omero user')
  parser.add_argument('-P', '--passwd', type=str, help='omero password')
  parser.add_argument('--logfile', type=str, help='log file (default=stderr)')
  parser.add_argument('--loglevel', type=str, choices=LOG_LEVELS,
                      help='logging level', default='INFO')
  return parser


def main(argv):
  parser = make_parser()
  args = parser.parse_args(argv)
  log_level = getattr(logging, args.loglevel)
  kwargs = {'format': LOG_FORMAT, 'datefmt': LOG_DATEFMT, 'level': log_level}
  if args.logfile:
    kwargs['filename'] = args.logfile
  logging.basicConfig(**kwargs)
  logger = logging.getLogger()
  #--
  try:
    host = args.host or vlu.ome_host()
    user = args.user or vlu.ome_user()
    passwd = args.passwd or vlu.ome_passwd()
  except ValueError as e:
    logger.critical(e)
    sys.exit(e)
  #--
  kb = KB(driver="omero")(host, user, passwd)
  generator = DataObjectGenerator(kb, args.ms_label, logger)
  generator.generate(args.n_samples)


if __name__ == "__main__":
  main(sys.argv[1:])


# Local Variables: **
# mode: python **
# End: **
