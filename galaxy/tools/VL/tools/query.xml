<tool id="vl_tools_query" name="VLT.query">
  <description>
    Provides a simplified environment to perform complex queries to
    BIOBANK.
  </description>
  <command interpreter="python">
    kb_query.py
    #if $advanced_configuration.configuration_level == 'advanced'
      --host=${advanced_configuration.vl_host}
      --user=${advanced_configuration.vl_user}
      --passwd=${advanced_configuration.vl_passwd}
    #else
      --host=$__app__.config.omero_default_host
      --user=$__app__.config.omero_default_user
      --passwd=$__app__.config.omero_default_passwd
    #end if
    --operator=galaxy
    --ofile=${output1}
    --loglevel=$__app__.config.vl_loglevel
    --logfile=${logfile}
    query
    --group=$study
    --code-file=$code_file
  </command>  
  <inputs>
    <param name="study" type="select" label="study label" 
	   help="Choose one of the available groups/studies. 
		 See below.">    
      <options from_parameter="tool.app.known_studies" 
	       transform_lines="[ &quot;%s%s%s:%s&quot; 
				% ( l[0], self.separator, l[0], l[1][:40] ) 
				for l in obj ]">
	<column name="value" index="0"/>
	<column name="name" index="1"/>
	<filter type="sort_by" column="0"/>
      </options>
    </param>
    <param name="query_code" type="text" area="True" size="10x60" 
           optional="False"
           value=""
	   />
    <!-- ************************************************** -->
    <conditional name="advanced_configuration">
      <param name="configuration_level" type="select" 
	     label="Configuration level">
	<option value="default" selected="true">Default configuration</option>	
	<option value="advanced">Advanced configuration</option>
      </param>
      <when value="default"/>
      <when value="advanced">
	<param name="vl_host" size="40" type="text" value="biobank05.crs4.it" 
	       label="Omero/VL host"/>
	<param name="vl_user" size="20" type="text" value="galaxy" 
	       label="Omero/VL user"/>
	<param name="vl_passwd" size="20" type="text" value="What?Me worry?" 
	       label="Omero/VL passwd"/>
      </when>
    </conditional>
  </inputs>

  <configfiles>
    <configfile name="code_file">${str($query_code).replace('__sq__', "'").replace('__cr____cn__', '\n')}</configfile>
  </configfiles>

  <outputs>
    <data format="tabular" name="output1" label="${tool.name}.mapped"/>
    <data format="txt" name="logfile"     label="${tool.name}.logfile"/>
  </outputs>

  <help>
The following is an example of a query that will dump family relations
within the group::

   writeheader('study', 'id', 'gender', 'father', 'mother')
   for i in Individuals(group):
      writerow(group.id, enum_label(i.gender), 
               i.father.id if i.father else 'None', 
               i.mother.id if i.mother else 'None')


The next example will prepare a file that could be used to define a
data collection and then as the input for a genotyping run::

   writeheader('dc_id', 'gender', 'data_sample', 
               'path', 'mimetype', 'size', 'sha1')
   for i in Individuals(group):
      for d in DataSamples(i, 'AffymetrixCel'):
         for o in DataObjects(d):
            writerow(group.id, enum_label(i.gender), d.id,
                     o.path, o.mimetype, o.size, o.sha1)

In the examples above, '''group''' (actually a study) corresponds to
the group whose label is assigned by the '''--group''' flag.

**Note** This is clearly an extremely dangerous tool.
    
  </help>

</tool>