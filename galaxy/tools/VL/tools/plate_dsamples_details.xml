<tool id="vl_tools_plate_dsamples" name="VLT.plate_data_samples">
  <description>
    Retrieve wells and connected data samples related to a known plate
  </description>
  <command interpreter="python">
    kb_query.py
    #if $advanced_configuration.configuration_level == 'advanced'
      --host=$advanced_configuration.vl_host
      --user=$advanced_configuration.vl_user
      --passwd=$advanced_configuration.vl_passwd
    #end if
    --operator=galaxy
    --loglevel=$__app__.config.vl_loglevel
    --logfile=${logfile}
    --ofile=${output}
    plate_data_samples
    #if str($plate) != 'select_one'
      --plate=${plate}
    #end if
  </command>
  <inputs>
    <param name="plate" type="select" label="Context Titer Plate"
	   help="Choose one of the already defined Titer Plates">
      <options from_parameter="tool.app.known_titer_plates"
	       transform_lines="[ &quot;%s%s%s:%s&quot;
	                          % (l[0], self.separator, l[0], l[1][:40])
				  for l in obj ]">
	<column name="value" index="0"/>
	<column name="name" index="1"/>
	<filter type="sort_by" column="0"/>
	<filter type="add_value" name="Select a plate from the list"
		value="select_one" index="0"/>
      </options>
    </param>

    <!-- ************************************************** -->
    <conditional name="advanced_configuration">
      <param name="configuration_level" type="select" 
	     label="Configuration level">
	<option value="default" selected="true">Default configuration</option>	
	<option value="advanced">Advanced configuration</option>
      </param>
      <when value="default"/>
      <when value="advanced">
	<param name="vl_host" size="40" type="text" value="biobank05.crs4.it" 
	       label="Omero/VL host"/>
	<param name="vl_user" size="20" type="text" value="galaxy" 
	       label="Omero/VL user"/>
	<param name="vl_passwd" size="20" type="text" value="What?Me worry?" 
	       label="Omero/VL passwd"/>
      </when>
    </conditional>
  </inputs>

  <outputs>
    <data format="tabular" name="output"  label="${tool.name}.genotypes"/>
    <data format="txt"     name="logfile" label="${tool.name}.log"/>
  </outputs>
  <help>
Using of the the selectable plates barcode, the tool will generate a
report file for the plate like::

  PLATE_barcode   PLATE_label  WELL_label  WELL_status       DATA_SAMPLE_label
  XXYYZZKK        test_plate   A01         CONTENTUSABLE     a01_test_sample
  XXYYZZKK        test_plate   A02         CONTENTUSABLE     X
  XXYYZZKK        test_plate   A03         UNKNOWN OR EMPTY  X
  XXYYZZKK        test_plate   A04         CONTENTUSABLE     a04_test_sample
  XXYYZZKK        test_plate   A05         DISCARDED         X
  ...

For each plate, all wells will be generated in the output file, even
the ones not actually recorded into the system, these wells will be
marked wit a 'UNKOWN OR EMPTY' status.

For each well, the tool performs a query in order to find if at least
one data sample is directly connected to the well itself; if at least
one is found, the label of the data sample will be placed in the
DATA_SAMPLE_label column, if no data sample is connected to the well a
'X' will be placed.
  </help>
</tool>