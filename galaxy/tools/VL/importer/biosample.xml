<tool id="vl_import_biosample" name="VLI.biosample">
  <description>import BioSample definitions within omero/vl</description>
  <command interpreter="python2.7">
    importer.py
    #if $advanced_configuration.configuration_level == 'advanced'
      --host=$advanced_configuration.vl_host
      --user=$advanced_configuration.vl_user
      --passwd=$advanced_configuration.vl_passwd
    #else
      --host=$__app__.config.omero_default_host
      --user=$__app__.config.omero_default_user
      --passwd=$__app__.config.omero_default_passwd
    #end if
    --operator=galaxy
    --ifile=${input1}
    --ofile=${output1}
    --loglevel=$__app__.config.vl_loglevel
    --logfile=${logfile}
    biosample
    #if str($study) != 'use_provided'
      --study ${study}
    #end if
    #if str($source_type) != 'use_provided'
      --source-type ${source_type}
    #end if
    #if str($vessel_type) != 'use_provided'
      --vessel-type ${vessel_type}
    #end if
    #if str($vessel_content) != 'use_provided'
      --vessel-content=${vessel_content}
    #end if
    #if str($vessel_status) != 'use_provided'
      --vessel-status=${vessel_status}
    #end if
  </command>  
  <inputs>
    <param format="tabular" name="input1" type="data"
	   label="A tabular dataset with the following columns ..."/>

    <param name="study" type="select" label="Context study" 
	   help="Choose from the already defined studies. See below.">    
      <options from_parameter="tool.app.known_studies" 
	       transform_lines="[ &quot;%s%s%s:%s&quot; 
                                  % ( l[0], self.separator, l[0], l[1][:40] ) 
                                  for l in obj ]">
        <column name="value" index="0"/>
        <column name="name" index="1"/>
        <filter type="sort_by" column="0"/>
        <filter type="add_value" name="Records provide study labels" 
                value="use_provided" index="0"/>
      </options>
    </param>

    <param name="source_type" type="select"
	   label="type of the source object"
	   help="Choose from the legal types. See below.">
      <option value="use_provided"       selected="true">
      Use what provided by record</option>
      <option value="Tube"       selected="true">Tube</option>
      <option value="PlateWell">PlateWell</option>
      <option value="Individual">Individual</option>
    </param>

    <param name="vessel_type" type="select"
	   label="type of the vessel object"
	   help="Choose from the legal types. See below.">
      <option value="use_provided"       selected="true">
      Use what provided by record</option>
      <option value="Tube">Tube</option>
      <option value="PlateWell">PlateWell</option>
    </param>

    <param name="vessel_content" type="select" label="Vessel content" 
	   help="Choose from one of the available values. See below.">    
      <options from_parameter="tool.app.kb.VesselContent.__enums__" 
	       transform_lines="[ &quot;%s%s%s&quot; 
                                  % (e.enum_label(),
                                     self.separator,
                                     e.enum_label()) 
                                  for e in obj ]">
        <column name="value" index="0"/>
        <column name="name" index="1"/>
        <filter type="sort_by" column="0"/>
        <filter type="add_value" name="Records provide vessel content" 
                value="use_provided" index="0"/>
      </options>
    </param>
    <param name="vessel_status" type="select" label="Vessel status" 
	   help="Choose from one of the available values. See below.">    
      <options from_parameter="tool.app.kb.VesselStatus.__enums__" 
	       transform_lines="[ &quot;%s%s%s&quot; 
                                  % (e.enum_label(),
                                     self.separator,
                                     e.enum_label()) 
                                  for e in obj ]">
        <column name="value" index="0"/>
        <column name="name" index="1"/>
        <filter type="sort_by" column="0"/>
        <filter type="add_value" name="Records provide vessel status" 
                value="use_provided" index="0"/>
      </options>
    </param>

    <conditional name="extra_fields">
      <param name="enabled" type="select" 
	     label="Enable extra optional fields">
	<option value="no" selected="true">no</option>	
	<option value="yes">yes</option>
      </param>
      <when value="no"/>
      <when value="yes">
	<param name="current_volume" type="float"
	       value="20" 
	       help="fluid (FIXME UNITS) currently held in the vessel">
	  <validator type="in_range" message="Volume must be positive" 
		     min="0" max="inf"/>
	</param>
	<param name="used_volume" type="float"
	       value="20" 
	       help="amount of source fluid (FIXME UNITS) used">
	  <validator type="in_range" message="Volume must be positive" 
		     min="0" max="inf"/>
	</param>
      </when>
    </conditional>

    <!-- ************************************************** -->
    <conditional name="advanced_configuration">
      <param name="configuration_level" type="select" 
	     label="Configuration level">
	<option value="default" selected="true">Default configuration</option>	
	<option value="advanced">Advanced configuration</option>
      </param>
      <when value="default"/>
      <when value="advanced">
	<param name="vl_host" size="40" type="text" value="localhost" 
	       label="Omero/VL host"/>
	<param name="vl_user" size="20" type="text" value="root" 
	       label="Omero/VL user"/>
	<param name="vl_passwd" size="20" type="text" value="What?Me worry?" 
	       label="Omero/VL passwd"/>
      </when>
    </conditional>
  </inputs>

  <outputs>
    <data format="tabular" name="output1" label="${tool.name}.mapping"/>
    <data format="txt" name="logfile"     label="${tool.name}.logfile"/>
  </outputs>
  <help>
FIXME


A biosample record will have, at least, the following fields::

  label     source
  I001-bs-2 V932814892
  I002-bs-2 V932814892

Another example, this time dna samples::

  label    source     used_volume current_volume
  I001-dna V932814899 0.3         0.2
  I002-dna V932814900 0.22        0.2

where '''used_volume''' and '''current_volume''' are measured in FIXME
microliters.

A special case is when the records refer to biosamples contained in
plate wells. Together with the minimal columns above, there should be
a column with the vid of the relevant TiterPlate. For instance::

  plate  label source
  V39030 A01   V932814892
  V39031 A02   V932814893
  V39032 A03   V932814894

where the label column is now the label of the well position.

If row and column (optional) are provided, it will use that
location. If they are not, it will deduce them from label (e.g., J01
-> row=10, column=1). Missing labels will be generated as

       '%s%03d' % (chr(row + ord('A') - 1), column)

Badly formed label will bring the rejection of the record. The same
will happen if label, row and column are inconsistent.  The well will
be filled by current_volume material produced by removing used_volume
material taken from the bio material contained in the vessel
identified by source. Row and Column are base 1.

  </help>

</tool>