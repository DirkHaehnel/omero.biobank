#!/usr/bin/env python

# BEGIN_COPYRIGHT
# END_COPYRIGHT


"""
Add missing GDOs for a given marker set
=======================================

Iterate over all genotype data samples corresponding to the given
marker set; create a GDO table row for each genotpye data sample
that does not already have one.
"""

import sys, argparse, logging

from bl.vl.kb import KBError, mimetypes, KnowledgeBase as KB
import bl.vl.kb.drivers.omero.utils as vlu
from bl.vl.genotype.io import read_ssc
from bl.vl.version import version

LOG_FORMAT = '%(asctime)s|%(levelname)-8s|%(message)s'
LOG_DATEFMT = '%Y-%m-%d %H:%M:%S'
LOG_LEVELS = ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']


def make_parser():
  desc="Add missing GDOs for a given marker set"
  parser = argparse.ArgumentParser(description=desc)
  parser.add_argument('-H', '--host', type=str, help='omero hostname')
  parser.add_argument('-U', '--user', type=str, help='omero user')
  parser.add_argument('-P', '--passwd', type=str, help='omero password')
  parser.add_argument('-m', '--markers-set-label', required=True,
                      help='markers set label')
  parser.add_argument('-s', '--study-label', required=True, help='study label')
  parser.add_argument('--logfile', type=str, help='log file (default=stderr)')
  parser.add_argument('--loglevel', type=str, choices=LOG_LEVELS,
                      help='logging level', default='INFO')
  return parser


def critical(logger, msg):
  logger.critical(msg)
  raise KBError(msg)


def main(argv):
  parser = make_parser()
  args = parser.parse_args(argv)

  log_level = getattr(logging, args.loglevel)
  kwargs = {'format': LOG_FORMAT, 'datefmt': LOG_DATEFMT, 'level': log_level}
  if args.logfile:
    kwargs['filename'] = args.logfile
  logging.basicConfig(**kwargs)
  logger = logging.getLogger()  
  
  try:
    host = args.host or vlu.ome_host()
    user = args.user or vlu.ome_user()
    passwd = args.passwd or vlu.ome_passwd()
  except ValueError, ve:
    logger.critical(ve)
    sys.exit(ve)

  kb = KB(driver="omero")(host, user, passwd)
  study = kb.get_study(label=args.study_label)
  if study is None:
    critical(logger, "no study in db with label %s" % args.study_label)
  ms = kb.get_snp_markers_set(label=args.markers_set_label)
  if ms is None:
    critical(logger, "no marker set in db with label %s"
             % args.markers_set_label)
  logger.info("loading markers for %s" % ms.label)
  ms.load_markers()
  logger.info("finished loading markers for %s" % ms.label)
  query = "from GenotypeDataSample g where g.snpMarkersSet.id = :id"
  params = {"id": ms.omero_id}
  gds = kb.find_all_by_query(query, params)
  logger.info("found %d genotype data samples related to %s"
              % (len(gds), args.markers_set_label))
  dev_label = 'gdoize_ms-%s' % version
  dev_maker = 'CRS4'
  dev_model = 'IMPORT'
  dev_release = version
  dev = kb.get_device(dev_label)
  if not dev:
    dev = kb.create_device(dev_label, dev_maker, dev_model,
                           dev_release)
  action = kb.create_an_action(study, device = dev)

  n_created_gdos = 0
  for g in gds:
    assert ms == g.snpMarkersSet
    logger.info("loading data objects for %s" % g.label)
    dos = kb.get_data_objects(g)
    ssc_do = None
    for do in dos:
      if do.mimetype == mimetypes.GDO_TABLE:
        logger.info("%s already has a gdo" % g.label)
        break
      if do.mimetype == mimetypes.SSC_FILE:
        ssc_do = do
    else:
      if ssc_do:
        logger.info("reading genotyping data for %s" % g.label)
        probs, confs = read_ssc(ssc_do.path, ms)
        logger.info("creating gdo for %s" % g.label)
        kb.add_gdo_data_object(action, g, probs, confs)
        logger.info("finished with %s" % g.label)
        n_created_gdos += 1
  if n_created_gdos == 0:
    kb.delete(action)
    kb.delete(dev)
  logger.info("created %d gdos" % n_created_gdos)


if __name__ == "__main__":
  main(sys.argv[1:])


# Local Variables: **
# mode: python **
# End: **
