#!/usr/bin/env python
import sys, os

import argparse
import sys

import csv

"""

Import Utility
==============


The purpose of this utility is to import in vl externally generated data.

Data objects
------------

This is the basic import facility.


Import of individuals collections
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,


Will read in a tsv file with the following columns::

  study label gender   father mother
  xxx   id2   male   id4    id5
  xxx   id3   female None   None
  ....

A study with label ''xxx'' will be automatically generated if missing,
and the individuals will be enrolled in the given study. It is not
possible to import the same individual twice, and the related file rows will be noisily
ignored.

.. FIXME ref to individual doc



Import of blood samples
,,,,,,,,,,,,,,,,,,,,,,,


Will read in a tsv file with the following columns::

  study label bslabel bsbarcode initial_volume current_volume status
  xxx   id2   bs01    328989238 20             20             USABLE
  xxx   id3   bs03    328989228 20             20             USABLE
  ....

.. FIXME ref to blood_sample doc


Import of DNA samples
,,,,,,,,,,,,,,,,,,,,,,,

Will read in a csv file with the following columns::

  bslabel bsbarcode dnalabel dnabarcode initial_volume current_volume \
     nanodrop_concentration qp230260 qp230280 status
  bs01    328989238 dn01      3989328   20             20            USABLE
  bs03    328989228 dn02      2389898   20             20            USABLE
  ....

Record that point to an unknown (bslabel, bsbarcode) pair will be noisily
ignored. The same will happen to records that have the same dnalabel or
dnabarcode of a previously seen dna sample.

.. FIXME ref to dna_sample doc

Import of PlateWells
,,,,,,,,,,,,,,,,,,,,


Will read in a csv file with the following columns::

  plate_label plate_barcode row column dnalabel dnabarcode volume
  p01         2390920       10  2      d01      3289892389 0.1

Default plate dimensions are provided with a flag

  > import -v PlateWell -i file.csv --plate-shape=30x32

Each import should have flags with the device description....


Import of Raw GT result files
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,

Will read in a tsv file with the following columns::

  study  label    type            plate_barcode row column QC path
  BSTUDY AAAA.CEL AffymetrixCel   2849823098429 22  22     0.33       file:/ELS/els6/...

"""


#---------------------------------------------------------------
import logging, time
LOG_FILENAME = 'importer.log'
logging.basicConfig(filename=LOG_FILENAME,
                    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
                    level=logging.DEBUG)

logger = logging.getLogger("check_index_sanity")

ch = logging.StreamHandler()
ch.setLevel(logging.INFO)

formatter = logging.Formatter(fmt='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

ch.setFormatter(formatter)

logger.addHandler(ch)

counter = 0
def debug_boundary(f):
  def debug_boundary_wrapper(*args, **kv):
    global counter
    now = time.time()
    counter += 1
    logger.debug('%s[%d] in' % (f.__name__, counter))
    res = f(*args, **kv)
    logger.debug('%s[%d] out (%f)' % (f.__name__, counter,
                                      time.time() - now))
    counter -= 1
    return res
  return debug_boundary_wrapper

#---------------------------------------------------------------
import bl.vl.app.importer.individual
import bl.vl.app.importer.blood_sample
import bl.vl.app.importer.dna_sample
import bl.vl.app.importer.titer_plate
import bl.vl.app.importer.plate_well


class App(object):
  def __init__(self):
    self.supported_submodules = []
    bl.vl.app.importer.individual.do_register(self.supported_submodules)
    bl.vl.app.importer.blood_sample.do_register(self.supported_submodules)
    bl.vl.app.importer.dna_sample.do_register(self.supported_submodules)
    bl.vl.app.importer.titer_plate.do_register(self.supported_submodules)
    bl.vl.app.importer.plate_well.do_register(self.supported_submodules)

  def make_parser(self):
    parser = argparse.ArgumentParser(description="A magic importer")
    parser.add_argument('-i', '--ifile', type=argparse.FileType('r'),
                        help='the input csv file',
                        default=sys.stdin)
    parser.add_argument('-H', '--host', type=str,
                        help='omero host system',
                        default='localhost')
    parser.add_argument('-U', '--user', type=str,
                        help='omero user',
                        default='root')
    parser.add_argument('-P', '--passwd', type=str,
                        help='omero user passwd')
    parser.add_argument('-K', '--keep-tokens', type=int,
                        default=1, help='omero tokens for open session')

    subparsers = parser.add_subparsers()

    for k, h, addp, impl in self.supported_submodules:
      subparser = subparsers.add_parser(k, help=h)
      addp(subparser)
      subparser.set_defaults(func=impl)
    self.parser = parser
    return parser

def main(argv):
  app = App()
  parser = app.make_parser()
  args = parser.parse_args()
  args.func(args)

if __name__ == "__main__":
    main(sys.argv)


# Local Variables: **
# mode: python **
# End: **
