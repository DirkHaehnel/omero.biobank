#!/usr/bin/env python
import sys, os

import argparse
import sys

import csv

"""

Import Utility
==============


The purpose of this utility is to import in vl externally generated data.

FIXME documentations should be extracted from imported modules..

"""


#---------------------------------------------------------------
import logging, time
LOG_FILENAME = 'importer.log'
logging.basicConfig(filename=LOG_FILENAME,
                    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
                    level=logging.DEBUG)
#                    level=logging.INFO)

logger = logging.getLogger()

ch = logging.StreamHandler()
ch.setLevel(logging.INFO)

formatter = logging.Formatter(fmt='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

ch.setFormatter(formatter)

logger.addHandler(ch)

counter = 0
def debug_boundary(f):
  def debug_boundary_wrapper(*args, **kv):
    global counter
    now = time.time()
    counter += 1
    logger.debug('%s[%d] in' % (f.__name__, counter))
    res = f(*args, **kv)
    logger.debug('%s[%d] out (%f)' % (f.__name__, counter,
                                      time.time() - now))
    counter -= 1
    return res
  return debug_boundary_wrapper

#---------------------------------------------------------------
import bl.vl.app.importer.individual
import bl.vl.app.importer.blood_sample
import bl.vl.app.importer.dna_sample
import bl.vl.app.importer.titer_plate
import bl.vl.app.importer.plate_well
import bl.vl.app.importer.device
import bl.vl.app.importer.data_sample
import bl.vl.app.importer.data_object
import bl.vl.app.importer.data_collection
import bl.vl.app.importer.marker_definition
import bl.vl.app.importer.marker_alignment
import bl.vl.app.importer.markers_set
import bl.vl.app.importer.diagnosis



class App(object):
  def __init__(self):
    self.supported_submodules = []
    bl.vl.app.importer.individual.do_register(self.supported_submodules)
    bl.vl.app.importer.blood_sample.do_register(self.supported_submodules)
    bl.vl.app.importer.dna_sample.do_register(self.supported_submodules)
    bl.vl.app.importer.titer_plate.do_register(self.supported_submodules)
    bl.vl.app.importer.plate_well.do_register(self.supported_submodules)
    bl.vl.app.importer.device.do_register(self.supported_submodules)
    bl.vl.app.importer.data_sample.do_register(self.supported_submodules)
    bl.vl.app.importer.data_object.do_register(self.supported_submodules)
    bl.vl.app.importer.data_collection.do_register(self.supported_submodules)
    bl.vl.app.importer.marker_definition.do_register(self.supported_submodules)
    bl.vl.app.importer.marker_alignment.do_register(self.supported_submodules)
    bl.vl.app.importer.markers_set.do_register(self.supported_submodules)
    bl.vl.app.importer.diagnosis.do_register(self.supported_submodules)

  def make_parser(self):
    parser = argparse.ArgumentParser(description="A magic importer")
    parser.add_argument('-i', '--ifile', type=argparse.FileType('r'),
                        help='the input csv file',
                        default=sys.stdin)
    parser.add_argument('-H', '--host', type=str,
                        help='omero host system',
                        default='localhost')
    parser.add_argument('-U', '--user', type=str,
                        help='omero user',
                        default='root')
    parser.add_argument('-P', '--passwd', type=str,
                        help='omero user passwd')
    parser.add_argument('-K', '--keep-tokens', type=int,
                        default=1, help='omero tokens for open session')

    subparsers = parser.add_subparsers()

    for k, h, addp, impl in self.supported_submodules:
      subparser = subparsers.add_parser(k, help=h)
      addp(subparser)
      subparser.set_defaults(func=impl)
    self.parser = parser
    return parser

def main(argv):
  app = App()
  parser = app.make_parser()
  args = parser.parse_args()
  args.func(args)

if __name__ == "__main__":
    main(sys.argv)


# Local Variables: **
# mode: python **
# End: **
