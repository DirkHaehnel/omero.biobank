#!/usr/bin/env python
"""

Destroy and Recreate Omero/VL Tables
====================================

This is a dangerous thing to do. It is destructive, and it should be
done only when all tables need to be redefined.

FIXME
"""

import logging

LOG_FILENAME='create_tables.log'
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
                    level=logging.INFO,
                    filename=LOG_FILENAME)

logger = logging.getLogger()

ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)

formatter = logging.Formatter(fmt='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

ch.setFormatter(formatter)

logger.addHandler(ch)

#------------------------------------------------------------------------------------

from bl.vl.kb.drivers.omero.proxy import Proxy


import os, sys
import argparse

def make_parser():
  desc="Destroy and re-create snp support OmeroTables."
  epilog="*** THIS PROGRAM WILL DESTROY ALL YOUR SNP TABLE DATA ***"
  parser = argparse.ArgumentParser(description=desc,
                                   epilog=epilog,
                                   formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  parser.add_argument('-H', '--host', type=str,
                      help='omero host system',
                      default='localhost')
  parser.add_argument('-U', '--user', type=str,
                      help='omero user',
                      default='root')
  parser.add_argument('-P', '--passwd', type=str,
                      help='omero user passwd')
  parser.add_argument('--do-it', action='store_true',
                      default=False, help='I known the risks. I still want to do it.')
  return parser

def main():
  parser = make_parser()
  args = parser.parse_args()
  if not (args.host and args.user and args.passwd):
    print '\nERROR: missing host, user and passwd\n'
    parser.print_usage()
    sys.exit(0)
  if not args.do_it:
    print 'Are you sure? Really? Then enable the --do-it flag.'
    parser.print_usage()
    sys.exit(0)
  host, user, passwd = args.host, args.user, args.passwd

  logger.info('connecting to %s with user %s' % (host, user))
  p = Proxy(host, user, passwd)
  logger.info('connected')

  #----- MARKER DEFINITIONS TABLE
  logger.info('deleting current snp marker definition table')
  p.delete_snp_marker_defitions_table()
  logger.info('deleted current snp marker definition table')
  #--
  logger.info('creating snp marker definition table')
  p.create_snp_marker_definitions_table()
  logger.info('created snp marker definition table')

  #----- SNP ALIGNEMENT TABLE
  logger.info('deleting current snp alignment table')
  p.delete_snp_alignments_table()
  logger.info('deleted current snp alignment table')
  #--
  logger.info('creating snp alignment table')
  p.create_snp_alignment_table()
  logger.info('created snp alignment table')

  #----- SNP SET DEF TABLE
  logger.info('deleting current snp set def table')
  p.delete_snp_markers_set_table()
  logger.info('deleted current snp set def table')
  #--
  logger.info('creating snp set table')
  p.create_snp_markers_set_table()
  logger.info('created snp set table')

  #----- SNP SET TABLE
  logger.info('deleting current snp set table')
  p.delete_snp_set_table()
  logger.info('deleted current snp set table')
  #--
  logger.info('creating snp set table')
  p.create_snp_set_table()
  logger.info('created snp set table')

  #----- EHR TABLE
  logger.info('deleting current ehr tables')
  p.delete_ehr_tables()
  logger.info('deleted current ehr tables')
  logger.info('creating ehr tables')
  p.create_ehr_tables()
  logger.info('created ehr tables')

if __name__ == "__main__":
  main()


# Local Variables: **
# mode: python **
# End: **



