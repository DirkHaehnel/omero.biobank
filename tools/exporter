#!/usr/bin/env python
import sys, os

import argparse
import sys

import csv

"""

Exporter Utility
================


The purpose of this utility is to export in vl externally generated data.

Data objects
------------

This is the basic export facility.


Export of individuals collections
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,


 exporter -o foo.tsv individual -S study


Will output  a tsv file with the following columns::

  study label gender   father mother vid
  xxx   id2   male   id4    id5      V98989
  xxx   id3   female None   None     V89833
  ....

.. FIXME ref to individual doc

....


"""


#---------------------------------------------------------------
import logging, time
LOG_FILENAME = 'exporter.log'
logging.basicConfig(filename=LOG_FILENAME,
                    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
                    level=logging.INFO)

logger = logging.getLogger()

ch = logging.StreamHandler()
ch.setLevel(logging.INFO)

formatter = logging.Formatter(fmt='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

ch.setFormatter(formatter)

logger.addHandler(ch)

counter = 0
def debug_boundary(f):
  def debug_boundary_wrapper(*args, **kv):
    global counter
    now = time.time()
    counter += 1
    logger.debug('%s[%d] in' % (f.__name__, counter))
    res = f(*args, **kv)
    logger.debug('%s[%d] out (%f)' % (f.__name__, counter,
                                      time.time() - now))
    counter -= 1
    return res
  return debug_boundary_wrapper

#---------------------------------------------------------------
# import bl.vl.app.exporter.individual
# import bl.vl.app.exporter.blood_sample
# import bl.vl.app.exporter.dna_sample
# import bl.vl.app.exporter.titer_plate
# import bl.vl.app.exporter.plate_well
# import bl.vl.app.exporter.data_sample
# import bl.vl.app.exporter.data_object
# import bl.vl.app.exporter.data_collection
import bl.vl.app.exporter.marker_definition
import bl.vl.app.exporter.markers_set


class App(object):
  def __init__(self):
    self.supported_submodules = []
    # bl.vl.app.exporter.individual.do_register(self.supported_submodules)
    # bl.vl.app.exporter.blood_sample.do_register(self.supported_submodules)
    # bl.vl.app.exporter.dna_sample.do_register(self.supported_submodules)
    # bl.vl.app.exporter.titer_plate.do_register(self.supported_submodules)
    # bl.vl.app.exporter.plate_well.do_register(self.supported_submodules)
    # bl.vl.app.exporter.data_sample.do_register(self.supported_submodules)
    # bl.vl.app.exporter.data_object.do_register(self.supported_submodules)
    # bl.vl.app.exporter.data_collection.do_register(self.supported_submodules)
    bl.vl.app.exporter.marker_definition.do_register(self.supported_submodules)
    bl.vl.app.exporter.markers_set.do_register(self.supported_submodules)

  def make_parser(self):
    parser = argparse.ArgumentParser(description="A magic exporter")
    parser.add_argument('-o', '--ofile', type=argparse.FileType('w'),
                        help='the output tsv file',
                        default=sys.stdout)
    parser.add_argument('-H', '--host', type=str,
                        help='omero host system',
                        default='localhost')
    parser.add_argument('-U', '--user', type=str,
                        help='omero user',
                        default='root')
    parser.add_argument('-P', '--passwd', type=str,
                        help='omero user passwd')
    parser.add_argument('-K', '--keep-tokens', type=int,
                        default=1, help='omero tokens for open session')

    subparsers = parser.add_subparsers()

    for k, h, addp, impl in self.supported_submodules:
      subparser = subparsers.add_parser(k, help=h)
      addp(subparser)
      subparser.set_defaults(func=impl)
    self.parser = parser
    return parser

def main(argv):
  app = App()
  parser = app.make_parser()
  args = parser.parse_args()
  try:
    args.func(args)
  except ValueError, e:
    logger.critical('ValueError exception %s' % e)

if __name__ == "__main__":
    main(sys.argv)


# Local Variables: **
# mode: python **
# End: **
